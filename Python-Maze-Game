#Python Maze Game
import turtle as t #In order not to continiously type 'turtle'
import time

time_elapsed = 0 #initializes timer
score = 0 #Initializes score

#Create a window
wn = t.Screen()
#Change the screen background color to black
wn.bgcolor("black")
#Title it
wn.title("A Maze Game")
#How big the game screen is going to be (in pixels)
wn.setup(700,700)

#define the timer display
timer_display = t.Turtle() #Creates a turtle
timer_display.hideturtle() #Makes the turtle invisible
timer_display.color("white") #Maes its text white
timer_display.penup() #Prevents it from drawing unnecessary lines
timer_display.goto(-150, 300) #Places it on top of the screen

#define the score display
score_display = t.Turtle()
score_display.hideturtle()
score_display.color("white")
score_display.penup()
score_display.goto(150, 300)
score_display.write(f"Score: {score}", font=("Arial", 14, "normal"))

#Create a Custom Class called 'Pen'
class Pen(t.Turtle): #Pen is a child of Turtle
    def __init__(self): #Necessary to initialize a class
        t.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup() #So the turtle doesn't draw lines as it moves
        self.speed(0) #Set the speed at maximum
 
#Create the treasure
class Treasure(t.Turtle):
    def __init__(self, x, y):
        t.Turtle.__init__(self)
        self.shape("circle")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.goto(x, y)

#Create the Player's avatar
class Player(t.Turtle):
    def __init__(self):
        t.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.speed(0)

    #Defind functions to move Player
    def go_up(self):
        #Calulate the spot to move to
        move_to_x = player.xcor()
        move_to_y = player.ycor() + 24
        #Check if the space has a wall
        if (move_to_x, move_to_y) not in walls:
            #Increase the vertical (y) coorditate of 24
            self.goto(move_to_x, move_to_y)

    def go_down(self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() - 24
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)

    def go_left(self):
        move_to_x = player.xcor() - 24
        move_to_y = player.ycor() 
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)

    def go_right(self):
        move_to_x = player.xcor() + 24
        move_to_y = player.ycor() 
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)

def is_collision(a, b):
    return a.distance(b) < 5

def update_timer():
    global time_elapsed #Lets you change the variable outside of the function
    time_elapsed += 1 #Increases the timer by one second
    timer_display.clear() #Erases the old number
    timer_display.write(f"Time: {time_elapsed}s", font=("Arial", 14, "normal"))
    #Makes the function run every second (1000 millisecons)
    wn.ontimer(update_timer, 1000) 

def increase_score(points=1): #Every time the function gets called you get 1 point
    global score
    score += points
    score_display.clear()
    score_display.write(f"Score: {score}", font=("Arial", 14, "normal"))

#Create level list
levels = [""] 
#The first item is empty so that level one can have index 1 etc
treasures = [""] #Same for treasures

#Define first level. Z's are where the walls are going to be
level_1 = [
"ZZZZZZZZZZZZZZZZZZZZZZZZZ",
"ZP ZZZZZZZ          ZZZZZ",
"Z  ZZZZZZZ  ZZZZZZ  ZZZZZ",
"Z       ZZ  ZZZZZZ  ZZZZZ",
"Z       ZZ  ZZZ        ZZ",
"ZZZZZZ  ZZ  ZZZ        ZZ",
"ZZZZZZ  ZZ  ZZZZZZ  ZZZZZ",
"ZZZZZZ  ZZ    ZZZZ  ZZZZZ",
"Z  ZZZ        ZZZZ  ZZZZZ",
"Z  ZZZ  ZZZZZZZZZZZZZZZZZ",
"Z         ZZZZZZZZZZZZZZZ",
"Z                ZZZZZZZZ",
"ZZZZZZZZZZZZ     ZZZZZ  Z",
"ZZZZZZZZZZZZZZZ  ZZZZZ  Z",
"ZZZT ZZZZZZZZZZ         Z",
"ZZZ                     Z",
"ZZZ         ZZZZZZZZZZZZZ",
"ZZZZZZZZZZ  ZZZZZZZZZZZZZ",
"ZZZZZZZZZZ              Z",
"ZZ   ZZZZZ              Z",
"ZZ   ZZZZZZZZZZZZZ  ZZZZZ",
"ZZ    ZZZZZZZZZZZZ  ZZZZZ",
"ZZ           ZZZ        Z",
"ZZZZ                    Z",
"ZZZZZZZZZZZZZZZZZZZZZZZZZ"
]

level_2 = [
"ZZZZZZZZZZZZZZZZZZZZZZZZZ",
"ZP       ZZ        ZZ   Z",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"Z  ZZ        ZZ        ZZ",
"ZZ  ZZ  ZZZZ  ZZ  ZZZZ  Z",
"Z        ZZ        ZZ  ZZ",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"Z  ZZ        ZZ        ZZ",
"ZZ  ZZ  ZZZZ  ZZ  ZZZZ  Z",
"Z        ZZ        ZZ  ZZ",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"Z  ZZ        ZZ        ZZ",
"ZZ  ZZ  ZZZZ  ZZ  ZZZZ  Z",
"Z        ZZ        ZZ  ZZ",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"Z  ZZ        ZZ        ZZ",
"ZZ  ZZ  ZZZZ  ZZ  ZZZZ  Z",
"Z        ZZ        ZZ TZZ",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"Z  ZZ        ZZ        ZZ",
"ZZ  ZZ  ZZZZ  ZZ  ZZZZ  Z",
"Z        ZZ        ZZ   Z",
"Z  ZZZZ  ZZ  ZZZZ  ZZ  ZZ",
"ZZZZZZZZZZZZZZZZZZZZZZZZZ"
]

level_3 = [
"ZZZZZZZZZZZZZZZZZZZZZZZZZ",
"Z  P     Z        Z     Z",
"Z  ZZZZ  Z  ZZZZ  Z  Z  Z",
"Z     Z     Z     Z  Z  Z",
"ZZZ ZZZZZZZ Z ZZZZZ  Z ZZ",
"Z     Z     Z     Z     Z",
"Z ZZZ Z Z ZZZ Z Z ZZZ Z Z",
"Z   Z   Z     Z   Z   Z Z",
"Z ZZZZZ ZZZZZZZZZZZZZ Z Z",
"Z     Z     Z     Z     Z",
"ZZZZZ ZZZZ Z ZZZ ZZZZZ ZZ",
"Z     Z     Z     Z     Z",
"Z ZZZZZ Z ZZZZZ Z Z ZZZ Z",
"Z     Z Z     Z Z Z   Z Z",
"ZZZZZ ZZZ ZZZ ZZZ ZZZ Z Z",
"Z     Z     Z     Z   Z Z",
"Z ZZZZZ ZZZ ZZZZZ ZZZ Z Z",
"Z Z     Z       Z     Z Z",
"Z Z ZZZZZ ZZZZZ Z ZZZZZ Z",
"Z     Z       Z     Z   Z",
"ZZZZZ Z ZZZZZ ZZZZZ ZZZZZ",
"Z     Z     Z     Z     Z",
"Z  ZZZZZZZZZZZZZZZZZZZ  Z",
"Z     T                 Z",
"ZZZZZZZZZZZZZZZZZZZZZZZZZ"
]

level_4 = [
"ZZZZZZZZZZZZZZZZZZZZZZZZZ",
"Z  P     Z     Z     Z  Z",
"Z  ZZZZZ Z ZZZZZ ZZZ Z ZZ",
"Z     Z  Z     Z   Z Z  Z",
"Z ZZZ ZZZZZZZ Z ZZZ Z  ZZ",
"Z Z     Z     Z     Z   Z",
"Z Z ZZZ Z ZZZZZ ZZZ Z  ZZ",
"Z Z   Z   Z     Z   Z   Z",
"ZZZZZ ZZZZZ ZZZ Z ZZZZ  Z",
"Z     Z     Z Z   Z     Z",
"Z ZZZ Z ZZZZZ Z ZZZ Z ZZZ",
"Z Z   Z     Z     Z Z   Z",
"Z Z ZZZ Z Z ZZZ ZZZ ZZZ Z",
"Z Z     Z Z     Z     Z Z",
"Z Z ZZZZZ ZZZZZ Z Z Z Z Z",
"Z   Z     Z   Z Z Z Z Z Z",
"ZZZ ZZZ ZZZ Z Z Z ZZZZZ Z",
"Z     Z Z   Z Z     Z   Z",
"Z ZZZ Z ZZZZZZZ ZZZ Z ZZZ",
"Z   Z Z     Z     Z Z T Z",
"Z Z ZZZZZ Z ZZZZZ Z ZZZ Z",
"Z Z     Z Z   Z   Z     Z",
"Z ZZZZZZZ Z ZZZ ZZZZZZZ Z",
"Z                     Z Z",
"ZZZZZZZZZZZZZZZZZZZZZZZZZ"
]

level_5 = [
"ZZZZZZZZZZZZZZZZZZZZZZZZZ",
"ZP        ZZ            Z",
"Z ZZZ ZZZ ZZZZ ZZZZZZ   Z",
"Z     Z        Z     Z  Z",
"Z ZZZ Z ZZZZZZ Z ZZZ Z ZZ",
"Z   Z     Z     Z   Z   Z",
"Z ZZZZZ ZZZ ZZZ Z ZZZ  ZZ",
"Z     Z     Z   Z Z     Z",
"ZZZZZ Z ZZZ ZZZZZ Z Z Z Z",
"Z   Z Z   Z     Z Z Z   Z",
"Z ZZZ ZZZ Z ZZZ ZZZ Z ZZZ",
"Z Z     Z   Z Z     Z   Z",
"Z Z ZZZZZZZ Z Z ZZZZZ ZZZ",
"Z         Z   Z     Z   Z",
"ZZZZ    ZZZZZZZ   ZZZZZZZ",
"Z   Z   Z   Z  T     Z  Z",
"Z Z Z Z Z Z Z ZZZZZ  Z ZZ",
"Z     Z   Z Z Z      Z  Z",
"Z  ZZZZZZZZ Z Z ZZZZZ  ZZ",
"Z     Z     Z   Z       Z",
"Z  ZZ Z ZZZZZZZ Z ZZZZ  Z",
"Z     Z         Z   Z   Z",
"Z  ZZZZZZZZZZZZZZZZZZ  ZZ",
"Z    Z     Z            Z",
"ZZZZZZZZZZZZZZZZZZZZZZZZZ"
]

#Add the maze to the list of mazes
levels.append(level_1)
levels.append(level_2)
levels.append(level_3)
levels.append(level_4)
levels.append(level_5)

#Create the Level Setup Function
def setup_maze(level):
    global treasures
    treasures = []
    walls.clear() #So that the old walls do not act as walls anymore
    pen.clear() #So the old walls disappear
    for y in range(len(level)): #For each row
        for x in range(len(level[y])): #For each column
            #Fetch the right character at the right place
            character = level[y][x]
            #Converts x and y positions to pixel coordinates
            screen_x = -288 + (x * 24) 
            screen_y = 288 - (y * 24)

            #Check if there is a Z(to make a wall)
            if character == "Z":
                pen.goto(screen_x, screen_y) #Moves to turtle to this position
                pen.stamp() #Leave a square stamp
                #Add coordinates to the wall list
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))

#Create the turtles you defined in the previous class
pen = Pen()
player = Player()
#Create a wall coordinate list
walls = []
setup_maze(level_1)
update_timer()

#(It's called Keyboard Binding)
t.listen() #Listen to the keyboard
#When the player clicks an arrow execute the corrisponding function
t.onkey(player.go_left,"Left")
t.onkey(player.go_right,"Right")
t.onkey(player.go_up,"Up")
t.onkey(player.go_down,"Down")

def game_loop():
    for treasure in treasures:
        if is_collision(player, treasure):
            treasure.hideturtle()
            treasures.remove(treasure)
            increase_score()

            if not treasures:
                next_level()
    
    wn.ontimer(game_loop, 100)

level_index = 1 

def next_level():
    global level_index
    level_index += 1
    setup_maze(globals()[f"level_{level_index}"])

game_loop()

while True:
    wn.update() #So that the window stays open until you close it
